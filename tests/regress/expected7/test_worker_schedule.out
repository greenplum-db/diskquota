-- start_ignore
\c
DROP DATABASE IF EXISTS t1;
NOTICE:  database "t1" does not exist, skipping
DROP DATABASE IF EXISTS t2;
NOTICE:  database "t2" does not exist, skipping
DROP DATABASE IF EXISTS t3;
NOTICE:  database "t3" does not exist, skipping
DROP DATABASE IF EXISTS t4;
NOTICE:  database "t4" does not exist, skipping
DROP DATABASE IF EXISTS t5;
NOTICE:  database "t5" does not exist, skipping
DROP DATABASE IF EXISTS t6;
NOTICE:  database "t6" does not exist, skipping
DROP DATABASE IF EXISTS t7;
NOTICE:  database "t7" does not exist, skipping
DROP DATABASE IF EXISTS t8;
NOTICE:  database "t8" does not exist, skipping
DROP DATABASE IF EXISTS t9;
NOTICE:  database "t9" does not exist, skipping
DROP DATABASE IF EXISTS t10;
NOTICE:  database "t10" does not exist, skipping
DROP DATABASE IF EXISTS t11;
NOTICE:  database "t11" does not exist, skipping
DROP DATABASE IF EXISTS t12;
NOTICE:  database "t12" does not exist, skipping
CREATE DATABASE t1;
CREATE DATABASE t2;
CREATE DATABASE t3;
CREATE DATABASE t4;
CREATE DATABASE t5;
CREATE DATABASE t6;
CREATE DATABASE t7;
CREATE DATABASE t8;
CREATE DATABASE t9;
CREATE DATABASE t10;
CREATE DATABASE t11;
CREATE DATABASE t12;
--end_ignore
\c t1
CREATE EXTENSION diskquota;
CREATE TABLE f1(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f1 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f1'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f1      | 98304 |    -1
(1 row)

--start_ignore
\! gpconfig -c diskquota.max_workers -v 1;
20230117:13:00:12:1977590 gpconfig:zhrt:zhrt-[INFO]:-completed successfully with parameters '-c diskquota.max_workers -v 1'
\! gpstop -arf;
20230117:13:00:12:1978021 gpstop:zhrt:zhrt-[INFO]:-Starting gpstop with args: -arf
20230117:13:00:12:1978021 gpstop:zhrt:zhrt-[INFO]:-Gathering information and validating the environment...
20230117:13:00:12:1978021 gpstop:zhrt:zhrt-[INFO]:-Obtaining Greenplum Coordinator catalog information
20230117:13:00:12:1978021 gpstop:zhrt:zhrt-[INFO]:-Obtaining Segment details from coordinator...
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 7.0.0-alpha.0+dev.16171.g005ee83c46 build dev'
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Commencing Coordinator instance shutdown with mode='fast'
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Coordinator segment instance directory=/home/zhrt/workspace/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Attempting forceful termination of any leftover coordinator process
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Terminating processes for segment /home/zhrt/workspace/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Stopping coordinator standby host zhrt mode=fast
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Successfully shutdown standby process on zhrt
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Targeting dbid [2, 5, 3, 6, 4, 7] for shutdown
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-Commencing parallel primary segment instance shutdown, please wait...
20230117:13:00:13:1978021 gpstop:zhrt:zhrt-[INFO]:-0.00% of jobs completed
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-100.00% of jobs completed
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-Commencing parallel mirror segment instance shutdown, please wait...
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-0.00% of jobs completed
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-100.00% of jobs completed
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-----------------------------------------------------
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-   Segments stopped successfully      = 6
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-   Segments with errors during stop   = 0
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-----------------------------------------------------
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-Successfully shutdown 6 of 6 segment instances 
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-Database successfully shutdown with no errors reported
20230117:13:00:14:1978021 gpstop:zhrt:zhrt-[INFO]:-Restarting System...
--end_ignore
\c 
SHOW diskquota.max_workers;
 diskquota.max_workers 
-----------------------
 1
(1 row)

\c t2
CREATE EXTENSION diskquota;
CREATE TABLE f2(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f2 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f2'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f2      | 98304 |    -1
(1 row)

\c t3
CREATE EXTENSION diskquota;
CREATE TABLE f3(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f3 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f3'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f3      | 98304 |    -1
(1 row)

--start_ignore
\! gpconfig -c diskquota.max_workers -v 11;
20230117:13:02:24:1981283 gpconfig:zhrt:zhrt-[INFO]:-completed successfully with parameters '-c diskquota.max_workers -v 11'
\! gpstop -arf;
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Starting gpstop with args: -arf
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Gathering information and validating the environment...
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Obtaining Greenplum Coordinator catalog information
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Obtaining Segment details from coordinator...
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 7.0.0-alpha.0+dev.16171.g005ee83c46 build dev'
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Commencing Coordinator instance shutdown with mode='fast'
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Coordinator segment instance directory=/home/zhrt/workspace/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Attempting forceful termination of any leftover coordinator process
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Terminating processes for segment /home/zhrt/workspace/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1
20230117:13:02:24:1981861 gpstop:zhrt:zhrt-[INFO]:-Stopping coordinator standby host zhrt mode=fast
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-Successfully shutdown standby process on zhrt
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-Targeting dbid [2, 5, 3, 6, 4, 7] for shutdown
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-Commencing parallel primary segment instance shutdown, please wait...
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-0.00% of jobs completed
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-100.00% of jobs completed
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-Commencing parallel mirror segment instance shutdown, please wait...
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-0.00% of jobs completed
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-100.00% of jobs completed
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-----------------------------------------------------
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-   Segments stopped successfully      = 6
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-   Segments with errors during stop   = 0
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-----------------------------------------------------
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-Successfully shutdown 6 of 6 segment instances 
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-Database successfully shutdown with no errors reported
20230117:13:02:25:1981861 gpstop:zhrt:zhrt-[INFO]:-Restarting System...
--end_ignore
\c 
SHOW diskquota.max_workers;
 diskquota.max_workers 
-----------------------
 11
(1 row)

\c t4
CREATE EXTENSION diskquota;
CREATE TABLE f4(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f4 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f4'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f4      | 98304 |    -1
(1 row)

\c t5
CREATE EXTENSION diskquota;
CREATE TABLE f5(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f5 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f5'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f5      | 98304 |    -1
(1 row)

\c t6
CREATE EXTENSION diskquota;
CREATE TABLE f6(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f6 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f6'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f6      | 98304 |    -1
(1 row)

\c t7
CREATE EXTENSION diskquota;
CREATE TABLE f7(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f7 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f7'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f7      | 98304 |    -1
(1 row)

\c t8
CREATE EXTENSION diskquota;
CREATE TABLE f8(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f8 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f8'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f8      | 98304 |    -1
(1 row)

\c t9
CREATE EXTENSION diskquota;
CREATE TABLE f9(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f9 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f9'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f9      | 98304 |    -1
(1 row)

\c t10
CREATE EXTENSION diskquota;
CREATE TABLE f10(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f10 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f10'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f10     | 98304 |    -1
(1 row)

\c t11
CREATE EXTENSION diskquota;
CREATE TABLE f11(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f11 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f11'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f11     | 98304 |    -1
(1 row)

\c t1
INSERT into f1 SELECT generate_series(0,100000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f1'::regclass and segid = -1;
 tableid |  size   | segid 
---------+---------+-------
 f1      | 3997696 |    -1
(1 row)

\c t7
INSERT into f7 SELECT generate_series(0,100000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f7'::regclass and segid = -1;
 tableid |  size   | segid 
---------+---------+-------
 f7      | 3997696 |    -1
(1 row)

\c t1
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
DROP TABLE f1;
CREATE EXTENSION diskquota;
CREATE TABLE f1(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f1 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f1'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f1      | 98304 |    -1
(1 row)

\c t2
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
DROP TABLE f2;
CREATE EXTENSION diskquota;
CREATE TABLE f2(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f2 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f2'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f2      | 98304 |    -1
(1 row)

\c t3
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t4
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t5
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t6
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t7
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t8
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t9
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t10
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t11
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t12
CREATE EXTENSION diskquota;
CREATE TABLE f12(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT into f12 SELECT generate_series(0,1000);
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 'f12'::regclass and segid = -1;
 tableid | size  | segid 
---------+-------+-------
 f12     | 98304 |    -1
(1 row)

SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t1
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c t2
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
--start_ignore
\c contrib_regression
DROP DATABASE t1;
DROP DATABASE t2;
DROP DATABASE t3;
DROP DATABASE t4;
DROP DATABASE t5;
DROP DATABASE t6;
DROP DATABASE t7;
DROP DATABASE t8;
DROP DATABASE t9;
DROP DATABASE t10;
DROP DATABASE t11;
DROP DATABASE t12;
\! gpconfig -r diskquota.worker_timeout;
20230117:13:04:52:2001815 gpconfig:zhrt:zhrt-[INFO]:-completed successfully with parameters '-r diskquota.worker_timeout'
\! gpconfig -r diskquota.max_workers;
20230117:13:04:53:2002403 gpconfig:zhrt:zhrt-[INFO]:-completed successfully with parameters '-r diskquota.max_workers'
\! gpstop -arf;
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Starting gpstop with args: -arf
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Gathering information and validating the environment...
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Obtaining Greenplum Coordinator catalog information
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Obtaining Segment details from coordinator...
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 7.0.0-alpha.0+dev.16171.g005ee83c46 build dev'
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Commencing Coordinator instance shutdown with mode='fast'
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Coordinator segment instance directory=/home/zhrt/workspace/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Attempting forceful termination of any leftover coordinator process
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Terminating processes for segment /home/zhrt/workspace/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1
20230117:13:04:53:2003022 gpstop:zhrt:zhrt-[INFO]:-Stopping coordinator standby host zhrt mode=fast
20230117:13:04:54:2003022 gpstop:zhrt:zhrt-[INFO]:-Successfully shutdown standby process on zhrt
20230117:13:04:54:2003022 gpstop:zhrt:zhrt-[INFO]:-Targeting dbid [2, 5, 3, 6, 4, 7] for shutdown
20230117:13:04:54:2003022 gpstop:zhrt:zhrt-[INFO]:-Commencing parallel primary segment instance shutdown, please wait...
20230117:13:04:54:2003022 gpstop:zhrt:zhrt-[INFO]:-0.00% of jobs completed
20230117:13:04:54:2003022 gpstop:zhrt:zhrt-[INFO]:-100.00% of jobs completed
20230117:13:04:54:2003022 gpstop:zhrt:zhrt-[INFO]:-Commencing parallel mirror segment instance shutdown, please wait...
20230117:13:04:54:2003022 gpstop:zhrt:zhrt-[INFO]:-0.00% of jobs completed
20230117:13:04:55:2003022 gpstop:zhrt:zhrt-[INFO]:-100.00% of jobs completed
20230117:13:04:55:2003022 gpstop:zhrt:zhrt-[INFO]:-----------------------------------------------------
20230117:13:04:55:2003022 gpstop:zhrt:zhrt-[INFO]:-   Segments stopped successfully      = 6
20230117:13:04:55:2003022 gpstop:zhrt:zhrt-[INFO]:-   Segments with errors during stop   = 0
20230117:13:04:55:2003022 gpstop:zhrt:zhrt-[INFO]:-----------------------------------------------------
20230117:13:04:55:2003022 gpstop:zhrt:zhrt-[INFO]:-Successfully shutdown 6 of 6 segment instances 
20230117:13:04:55:2003022 gpstop:zhrt:zhrt-[INFO]:-Database successfully shutdown with no errors reported
20230117:13:04:55:2003022 gpstop:zhrt:zhrt-[INFO]:-Restarting System...
--end_ignore
