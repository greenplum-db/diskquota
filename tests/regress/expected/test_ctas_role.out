-- Test that diskquota is able to cancel a running CTAS query by the role quota.
-- start_ignore
\! gpconfig -c "diskquota.hard_limit" -v "on"
20221018:11:33:42:045232 gpconfig:wxiaoran-a02:wxiaoran-[INFO]:-completed successfully with parameters '-c diskquota.hard_limit -v on'
\! gpstop -u
20221018:11:33:43:045341 gpstop:wxiaoran-a02:wxiaoran-[INFO]:-Starting gpstop with args: -u
20221018:11:33:43:045341 gpstop:wxiaoran-a02:wxiaoran-[INFO]:-Gathering information and validating the environment...
20221018:11:33:43:045341 gpstop:wxiaoran-a02:wxiaoran-[INFO]:-Obtaining Greenplum Master catalog information
20221018:11:33:43:045341 gpstop:wxiaoran-a02:wxiaoran-[INFO]:-Obtaining Segment details from master...
20221018:11:33:43:045341 gpstop:wxiaoran-a02:wxiaoran-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.22.1+dev.5.g4bb76bee5c build dev'
20221018:11:33:43:045341 gpstop:wxiaoran-a02:wxiaoran-[INFO]:-Signalling all postmaster processes to reload
-- end_ignore
SHOW diskquota.hard_limit;
 diskquota.hard_limit 
----------------------
 on
(1 row)

CREATE ROLE hardlimit_r;
NOTICE:  resource queue required -- using default resource queue "pg_default"
SELECT diskquota.set_role_quota('hardlimit_r', '1MB');
 set_role_quota 
----------------
 
(1 row)

GRANT USAGE ON SCHEMA diskquota TO hardlimit_r;
SET ROLE hardlimit_r;
-- heap table
CREATE TABLE t1 (i) AS SELECT generate_series(1, 10000000) DISTRIBUTED BY (i);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'generate_series' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
[hardlimit] role's disk space quota exceeded
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- temp table
CREATE TEMP TABLE t2 (i) AS SELECT generate_series(1, 100000000);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'generate_series' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
[hardlimit] role's disk space quota exceeded
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- toast table
CREATE TABLE toast_table (i) AS SELECT ARRAY(SELECT generate_series(1,10000)) FROM generate_series(1, 100000) DISTRIBUTED BY (i);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'array' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
[hardlimit] role's disk space quota exceeded
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- ao table
CREATE TABLE ao_table (i) WITH (appendonly=true) AS SELECT generate_series(1, 100000000) DISTRIBUTED BY (i);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'generate_series' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
[hardlimit] role's disk space quota exceeded
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- aocs table
CREATE TABLE aocs_table WITH (appendonly=true, orientation=column)
    AS SELECT i, ARRAY(SELECT generate_series(1,10000)) FROM generate_series(1, 100000) AS i;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
[hardlimit] role's disk space quota exceeded
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- disable hardlimit and do some clean-ups.
DROP TABLE IF EXISTS t1;
NOTICE:  table "t1" does not exist, skipping
DROP TABLE IF EXISTS t2;
NOTICE:  table "t2" does not exist, skipping
DROP TABLE IF EXISTS toast_table;
NOTICE:  table "toast_table" does not exist, skipping
DROP TABLE IF EXISTS ao_table;
NOTICE:  table "ao_table" does not exist, skipping
DROP TABLE IF EXISTS aocs_table;
NOTICE:  table "aocs_table" does not exist, skipping
RESET ROLE;
REVOKE USAGE ON SCHEMA diskquota FROM hardlimit_r;
DROP ROLE hardlimit_r;
\! gpconfig -c "diskquota.hard_limit" -v "off" > /dev/null
\! gpstop -u > /dev/null
