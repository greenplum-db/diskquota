-- heap table
begin;
create table t(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t select generate_series(1, 100000);
select count(*) from diskquota.show_relation_cache_all_seg();
 count 
-------
     3
(1 row)

commit;
select pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

select count(*) from diskquota.show_relation_cache_all_seg();
 count 
-------
     0
(1 row)

drop table t;
-- toast table
begin;
create table t(t text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 't' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t select array(select * from generate_series(1,1000)) from generate_series(1, 1000);
select count(*) from diskquota.show_relation_cache_all_seg();
 count 
-------
     9
(1 row)

select diskquota.check_relation_cache();
 check_relation_cache 
----------------------
 t
(1 row)

commit;
select pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

select count(*) from diskquota.show_relation_cache_all_seg();
 count 
-------
     0
(1 row)

drop table t;
-- AO table
begin;
create table t(a int, b text) with(appendonly=true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t select generate_series(1,1000) as a, repeat('a', 1000) as b;
select count(*) from diskquota.show_relation_cache_all_seg();
 count 
-------
    18
(1 row)

select diskquota.check_relation_cache();
 check_relation_cache 
----------------------
 t
(1 row)

commit;
select pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

select count(*) from diskquota.show_relation_cache_all_seg();
 count 
-------
     0
(1 row)

drop table t;
-- AOCS table
begin;
create table t(a int, b text) with(appendonly=true, orientation=column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t select generate_series(1,1000) as a, repeat('a', 1000) as b;
select count(*) from diskquota.show_relation_cache_all_seg();
 count 
-------
    18
(1 row)

select diskquota.check_relation_cache();
 check_relation_cache 
----------------------
 t
(1 row)

commit;
select pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

select count(*) from diskquota.show_relation_cache_all_seg();
 count 
-------
     0
(1 row)

drop table t;
