\! gpconfig -c "log_statement" -v "all" > /dev/null
\! gpstop -u > /dev/null
\! gpconfig --show log_statement
Values on all segments are consistent
GUC          : log_statement
Master  value: all
Segment value: all
SELECT pg_logfile_rotate();
 pg_logfile_rotate 
-------------------
 t
(1 row)

SELECT pg_logfile_rotate() FROM gp_dist_random('gp_id');
 pg_logfile_rotate 
-------------------
 t
 t
 t
(3 rows)

DROP DATABASE IF EXISTS query_string_db13;
NOTICE:  database "query_string_db13" does not exist, skipping
CREATE DATABASE query_string_db13;
\c query_string_db13
CREATE EXTENSION diskquota;
CREATE SCHEMA s1;
SET search_path TO s1;
CREATE TABLE a(i int) DISTRIBUTED BY (i);
INSERT INTO a SELECT generate_series(1,100);
-- expect insert success
INSERT INTO a SELECT generate_series(1,100000);
SELECT diskquota.set_schema_quota('s1', '1 MB');
 set_schema_quota 
------------------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- expect insert fail
INSERT INTO a SELECT generate_series(1,100);
ERROR:  schema's disk space quota exceeded with name:s1
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP TABLE IF EXISTS a;
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

RESET SEARCH_PATH;
DROP SCHEMA s1 CASCADE;
SET SEARCH_PATH TO gp_toolkit;
SELECT DISTINCT on (x) regexp_replace(logmessage, '(-)?\d+', '', 'g') as x
FROM gp_toolkit.gp_log_database
WHERE logmessage LIKE 'statement: %';
                                                                                                                                        x                                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 statement: -- complain if script is sourced in psql, rather than via CREATE EXTENSION                                                                                                                                                                                          +
                                                                                                                                                                                                                                                                                +
                                                                                                                                                                                                                                                                                +
 CREATE SCHEMA diskquota;                                                                                                                                                                                                                                                       +
                                                                                                                                                                                                                                                                                +
 CREATE TABLE diskquota.quota_config(                                                                                                                                                                                                                                           +
         targetOid oid,                                                                                                                                                                                                                                                         +
         quotatype int,                                                                                                                                                                                                                                                         +
         quotalimitMB int,                                                                                                                                                                                                                                                      +
         segratio float DEFAULT ,                                                                                                                                                                                                                                               +
         PRIMARY KEY(targetOid, quotatype)                                                                                                                                                                                                                                      +
 ) DISTRIBUTED BY (targetOid, quotatype);                                                                                                                                                                                                                                       +
                                                                                                                                                                                                                                                                                +
 CREATE TABLE diskquota.target (                                                                                                                                                                                                                                                +
         quotatype int, --REFERENCES disquota.quota_config.quotatype,                                                                                                                                                                                                           +
         primaryOid oid,                                                                                                                                                                                                                                                        +
         tablespaceOid oid, --REFERENCES pg_tablespace.oid,                                                                                                                                                                                                                     +
         PRIMARY KEY (primaryOid, tablespaceOid, quotatype)                                                                                                                                                                                                                     +
 );                                                                                                                                                                                                                                                                             +
                                                                                                                                                                                                                                                                                +
 CREATE TABLE diskquota.table_size(                                                                                                                                                                                                                                             +
         tableid oid,                                                                                                                                                                                                                                                           +
         size bigint,                                                                                                                                                                                                                                                           +
         segid smallint,                                                                                                                                                                                                                                                        +
         PRIMARY KEY(tableid, segid)                                                                                                                                                                                                                                            +
 ) DISTRIBUTED BY (tableid, segid);                                                                                                                                                                                                                                             +
                                                                                                                                                                                                                                                                                +
 CREATE TABLE diskquota.state(                                                                                                                                                                                                                                                  +
         state int,                                                                                                                                                                                                                                                             +
         PRIMARY KEY(state)                                                                                                                                                                                                                                                     +
 ) DISTRIBUTED BY (state);                                                                                                                                                                                                                                                      +
                                                                                                                                                                                                                                                                                +
 -- diskquota.quota_config AND diskquota.target is dump-able, other table can be generate on fly                                                                                                                                                                                +
 SELECT pg_catalog.pg_extension_config_dump('diskquota.quota_config', '');                                                                                                                                                                                                      +
 SELECT gp_segment_id, pg_catalog.pg_extension_config_dump('diskquota.quota_config', '') FROM gp_dist_r
 statement: CREATE EXTENSION diskquota;
 statement: CREATE SCHEMA s;
 statement: CREATE TABLE a(i int) DISTRIBUTED BY (i);
 statement: DROP EXTENSION diskquota;
 statement: DROP SCHEMA s CASCADE;
 statement: DROP TABLE IF EXISTS a;
 statement: INSERT INTO a SELECT generate_series(,);
 statement: insert into diskquota.quota_config values(,,);
 statement: insert into diskquota.table_size values (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,);
 statement: insert into diskquota.table_size values (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,);
 statement: insert into diskquota.table_size values (,,), (,,), (,,), (,,), (,,), (,,), (,,), (,,);
 statement: insert into diskquota.table_size values (,,), (,,), (,,), (,,);
 statement: mppexec
 statement: RESET search_path
 statement: RESET SEARCH_PATH;
 statement: SELECT c.targetOid, c.quotaType, c.quotalimitMB, COALESCE(c.segratio, ) AS segratio, COALESCE(t.tablespaceoid, ) AS tablespaceoid FROM diskquota.quota_config AS c LEFT OUTER JOIN diskquota.target AS t ON c.targetOid = t.primaryOid and c.quotaType = t.quotaType
 statement: SELECT diskquota.diskquota_fetch_table_stat(, ARRAY[]::oid[]) FROM gp_dist_random('gp_id');
 statement: SELECT diskquota.resume()
 statement: SELECT diskquota.set_schema_quota('s', ' MB');
 statement: SELECT diskquota.wait_for_worker_new_epoch();
 statement: SELECT DISTINCT on (x) regexp_replace(logmessage, '(-)?\d+', '', 'g') as x                                                                                                                                                                                          +
 FROM gp_toolkit.gp_log_database                                                                                                                                                                                                                                                +
 WHERE logmessage LIKE 'statement: %';
 statement: SELECT DISTINCT on (x) regexp_replace(logmessage, '\d+', '', 'g') as x                                                                                                                                                                                              +
 FROM gp_toolkit.gp_log_database                                                                                                                                                                                                                                                +
 WHERE logmessage LIKE 'statement: %';
 statement: SELECT DISTINCT on (x) regexp_replace(logmessage, '\d+', '', 'g') as x                                                                                                                                                                                              +
 FROM gp_toolkit.gp_log_database                                                                                                                                                                                                                                                +
 WHERE logmessage LIKE 'statement: %' ORDER BY logtime;
 statement: select * from diskquota.diskquota_fetch_table_stat(, '{,,,,}'::oid[])
 statement: select * from diskquota.diskquota_fetch_table_stat(, '{,,}'::oid[])
 statement: select * from diskquota.diskquota_fetch_table_stat(, '{,}'::oid[])
 statement: select * from diskquota.diskquota_fetch_table_stat(, '{}'::oid[])
 statement: select indcheckxmin from pg_catalog.pg_index where indexrelid = ''
 statement: select pg_catalog.gp_acquire_sample_rows(, , 'f');
 statement: select pg_catalog.pg_highest_oid()
 statement: select pg_catalog.pg_relation_size(, 'main')
 statement: SELECT pg_sleep();
 statement: SELECT regexp_replace(logmessage, '\d+', '', 'g')                                                                                                                                                                                                                   +
 FROM gp_toolkit.gp_log_database                                                                                                                                                                                                                                                +
 WHERE logmessage LIKE 'statement: %' ORDER BY logsegment, logtime;
 statement: select state from diskquota.state
 statement: select tableid, size, segid from diskquota.table_size
 statement: select true from diskquota.quota_config where targetoid =  and quotatype =
 statement: SET client_min_messages TO notice
 statement: SET search_path TO 'gp_toolkit'
 statement: SET SEARCH_PATH TO gp_toolkit;
 statement: SET search_path TO 's'
 statement: SET search_path TO s;
 statement: SET search_path TO '$user', 'public'
 statement: WITH deleted_table AS ( VALUES (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,))delete from diskquota.table_size where (tableid, segid) in ( SELECT * FROM deleted_table );
 statement: WITH deleted_table AS ( VALUES (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,), (,))delete from diskquota.table_size where (tableid, segid) in ( SELECT * FROM deleted_table );
 statement: WITH deleted_table AS ( VALUES (,), (,), (,), (,), (,), (,), (,), (,))delete from diskquota.table_size where (tableid, segid) in ( SELECT * FROM deleted_table );
 statement: WITH deleted_table AS ( VALUES (,), (,), (,), (,))delete from diskquota.table_size where (tableid, segid) in ( SELECT * FROM deleted_table );
(47 rows)

RESET SEARCH_PATH;
DROP EXTENSION diskquota;
\c contrib_regression
DROP DATABASE query_string_db13;
\! gpconfig -c log_statement -m 'all' -v 'none' > /dev/null
\! gpstop -u > /dev/null
\! gpconfig --show log_statement
Values on all segments are consistent
GUC          : log_statement
Master  value: all
Segment value: none
