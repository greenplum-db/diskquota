\! gpconfig -c "log_statement" -v "all" > /dev/null
\! gpstop -u > /dev/null
\! gpconfig --show log_statement
Values on all segments are consistent
GUC          : log_statement
Master  value: all
Segment value: all
SELECT pg_logfile_rotate();
 pg_logfile_rotate 
-------------------
 t
(1 row)

SELECT pg_logfile_rotate() FROM gp_dist_random('gp_id');
 pg_logfile_rotate 
-------------------
 t
 t
 t
(3 rows)

DROP DATABASE IF EXISTS query_string_db;
NOTICE:  database "query_string_db" does not exist, skipping
CREATE DATABASE query_string_db;
\c query_string_db
CREATE EXTENSION diskquota;
CREATE SCHEMA s1;
SET search_path TO s1;
CREATE TABLE a(i int) DISTRIBUTED BY (i);
INSERT INTO a SELECT generate_series(1,100);
-- expect insert success
INSERT INTO a SELECT generate_series(1,100000);
SELECT diskquota.set_schema_quota('s1', '1 MB');
 set_schema_quota 
------------------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- expect insert fail
INSERT INTO a SELECT generate_series(1,100);
ERROR:  schema's disk space quota exceeded with name:s1
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP TABLE IF EXISTS a;
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

RESET SEARCH_PATH;
DROP SCHEMA s1 CASCADE;
SET SEARCH_PATH TO gp_toolkit;
SELECT DISTINCT ON (diskquota_related) REGEXP_REPLACE(logmessage, '.*(diskquota\.[a-z_]+).*', '\1') AS diskquota_related
FROM gp_toolkit.gp_log_database
WHERE logmessage LIKE '%diskquota.%'
  AND logmessage NOT LIKE '%gp_toolkit%'
  AND logtime >= NOW() - INTERVAL '1 min';
          diskquota_related           
--------------------------------------
 diskquota.diskquota_fetch_table_stat
 diskquota.quota_config
 diskquota.resume
 diskquota.set_schema_quota
 diskquota.state
 diskquota.table_size
 diskquota.target
 diskquota.wait_for_worker_new_epoch
(8 rows)

RESET SEARCH_PATH;
DROP EXTENSION diskquota;
\c contrib_regression
DROP DATABASE query_string_db;
\! gpconfig -c log_statement -m 'all' -v 'none' > /dev/null
\! gpstop -u > /dev/null
\! gpconfig --show log_statement
Values on all segments are consistent
GUC          : log_statement
Master  value: all
Segment value: none
