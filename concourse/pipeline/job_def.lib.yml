#@ load("base.lib.yml", "add_res_by_conf", "add_res_by_name")

#! Job config for centos7
#@ def centos6_gpdb6_conf():
res_build_image: centos6-gpdb6-image-build
res_test_image: centos6-gpdb6-image-test
res_gpdb_bin: bin_gpdb6_centos6
diskquota_os: rhel6
#@ end

#! Job config for centos7
#@ def centos7_gpdb6_conf():
res_build_image: centos7-gpdb6-image-build
res_test_image: centos7-gpdb6-image-test
res_gpdb_bin: bin_gpdb6_centos7
diskquota_os: rhel7
#@ end

#! Job config for rhel8
#@ def rhel8_gpdb6_conf():
res_build_image: rhel8-gpdb6-image-build
res_test_image: rhel8-gpdb6-image-test
res_gpdb_bin: bin_gpdb6_rhel8
diskquota_os: rhel8
#@ end

#! Job config for ubuntu18
#@ def ubuntu18_gpdb6_conf():
res_build_image: ubuntu18-gpdb6-image-build
res_test_image: ubuntu18-gpdb6-image-test
res_gpdb_bin: bin_gpdb6_ubuntu18
diskquota_os: ubuntu18.04
#@ end

#@ def _build_task(conf):
task: #@ "build_" + conf["diskquota_os"]
file: diskquota_src/concourse/tasks/build_diskquota.yml
image: #@ conf["res_build_image"]
input_mapping:
  bin_gpdb: #@ conf["res_gpdb_bin"]
  diskquota_artifacts: diskquota_artifacts
#! output_mapping is necessary. Otherwise we may use a wrong
#! diskquota_bin in the test task.
output_mapping:
  "diskquota_artifacts": #@ "diskquota_artifacts_" + conf["diskquota_os"]
params:
  DISKQUOTA_OS: #@ conf["diskquota_os"]
#@ end

#@ def _test_task(conf):
task: #@ "test_" + conf["diskquota_os"]
timeout: 1h
file: diskquota_src/concourse/tasks/test_diskquota.yml
image: #@ conf["res_test_image"]
input_mapping:
  bin_gpdb: #@ conf["res_gpdb_bin"]
  bin_diskquota: #@ "diskquota_artifacts_" + conf["diskquota_os"]
params:
  DISKQUOTA_OS: #@ conf["diskquota_os"]
#@ end

#@ def build_test_job(param):
#@   res_map = param["res_map"]
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   add_res_by_name(res_map, param["gpdb_src"])
#@   add_res_by_name(res_map, "bin_cmake")
name: build_test
max_in_flight: 10
on_success: #@ trigger["on_success"]
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
plan:
#@   for trigger_plan in trigger["plans"]:
- #@ trigger_plan
#@   end
- in_parallel:
  - get: gpdb_src
    resource: #@ param["gpdb_src"]
  - get: bin_cmake
#@   for conf in confs:
#@     add_res_by_conf(res_map, conf)
#@     if conf["res_build_image"] == conf["res_test_image"]:
  - get: #@ conf["res_build_image"]
#@     else:
  - get: #@ conf["res_build_image"]
  - get: #@ conf["res_test_image"]
#@     end
  - get: #@ conf["res_gpdb_bin"]
#@   end
#@   if len(confs) == 1:
#@     conf = confs[0]
- #@ _build_task(conf)
- #@ _test_task(conf)
#@   else:
- in_parallel:
    steps:
#@     for conf in confs:
      - do:
        - #@ _build_task(conf)
        - #@ _test_task(conf)
#@     end
#@   end
#@ end
